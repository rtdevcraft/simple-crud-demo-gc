name: Build and Deploy to Google Cloud

# Run this workflow on pushes to the main branch
on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in this workflow
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: simple-crud-demo
  GAR_LOCATION: us-central1 # Artifact Registry location
  DB_CONNECTION_NAME: ${{ secrets.DB_CONNECTION_NAME }} # e.g., your-project:us-central1:your-instance
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_NAME: ${{ secrets.DB_NAME }}
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
  AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/react-github-pool/providers/github-provider'
          service_account: 'github-actions-deployer@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      # DEBUG
      - name: 'Test Impersonation Permission'
        run: |-
          echo "Attempting to generate an access token for the service account..."
          gcloud auth print-access-token --impersonate-service-account='github-actions-deployer@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      # Set up the gcloud CLI
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # Configure Docker to connect to the Artifact Registry
      - name: 'Configure Docker'
        run: 'gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Build and push the Docker image
      - name: 'Build and Push Docker Image'
        run: |-
          docker build \
            --build-arg DATABASE_URL="placeholder_for_build" \
            --tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" \
            .
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"

      # Deploy the image to Cloud Run
      - name: 'Deploy to Cloud Run'
        id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE_NAME }}'
          region: '${{ env.REGION }}'
          image: '${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}'
          # Set environment variables for the Cloud Run service
          env_vars: |-
            DATABASE_URL=postgresql://${{ env.DB_USER }}:${{ env.DB_PASS }}@localhost/${{ env.DB_NAME }}?host=/cloudsql/${{ env.DB_CONNECTION_NAME }}
            AUTH_SECRET=${{ env.AUTH_SECRET }}
            AUTH_GOOGLE_ID=${{ env.AUTH_GOOGLE_ID }}
            AUTH_GOOGLE_SECRET=${{ env.AUTH_GOOGLE_SECRET }}
          # Enable Cloud SQL connection
          flags: '--add-cloudsql-instances=${{ env.DB_CONNECTION_NAME }}'

      # Output the URL of the deployed service
      - name: 'Show Deployed URL'
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
